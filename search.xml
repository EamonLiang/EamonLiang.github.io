<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git操作实例</title>
    <url>/2022/05/18/git%E6%93%8D%E4%BD%9C%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<p>git是一个版本控制系统，其中每个版本库叫做一个git仓库(repository)，每个仓库都可以简单理解成一个目录(存放好多版本的目录)。Git能够跟踪并记录在该目录中所有文件的更新，包括文件修改操作和文件删除操作，方便用户追踪和还原文件的历史版本。</p>
<p>对于个人操作，git可以实现以下功能：</p>
<ol>
<li><p>连接远程仓库、将本地仓库的版本上传到远程仓库、或者从远程仓库更新本地仓库。</p>
</li>
<li><p>在本地git仓库进行文件上的操作，包括文件的修改和删除操作。</p>
</li>
<li><p>查看历史版本，比较历史版本与现在版本的不同（或者说历史版本和现在版本之间进行了哪些文件的操作）</p>
</li>
<li><p>回退到历史版本，并在历史版本上进行修改。</p>
</li>
<li><p>创建分支、合并分支、删除分支</p>
</li>
</ol>
<p>对于团队协作，在掌握以上操作的基础上，还需要明白以下几点：</p>
<ol>
<li><p>熟悉常用的工作流</p>
</li>
<li><p>知道如何解决冲突</p>
</li>
</ol>
<p>为了避免冗余描述，本文不强调操作所在的文件目录，以下操作请注意操作所在的文件目录。</p>
<h3 id="连接远程仓库"><a href="#连接远程仓库" class="headerlink" title="连接远程仓库"></a>连接远程仓库</h3><p>连接远程仓库有两种方式。一是首先在本地创建git仓库，然后连接到远程仓库。二是直接从远程仓库克隆到本地仓库。个人推荐第二种。此外请不要直接在github上进行文件的修改操作，尽量在本地仓库修改再同步到远程仓库，否则会出现本地仓库修改之后同步远程仓库冲突。</p>
<h4 id="创建本地仓库，然后连接到远程仓库"><a href="#创建本地仓库，然后连接到远程仓库" class="headerlink" title="创建本地仓库，然后连接到远程仓库"></a>创建本地仓库，然后连接到远程仓库</h4><p><img src="https://raw.githubusercontent.com/EamonLiang/picRepository/main/images/202205261658985.png" alt="20220525111003263"></p>
<p>在github上创建一个远程仓库，github.com –&gt; 头像 –&gt; Your repositories –&gt;点击New按钮 创建一个git仓库。repository name处填repOne，点击create repository按钮，创建仓库。</p>
<p>在出现的仓库页面点击code按钮，复制SSH链接，通过remote指令将本地仓库与远程仓库链接。</p>
<p><img src="https://raw.githubusercontent.com/EamonLiang/picRepository/main/images/202205261659957.png" alt="image-20220525154347427"></p>
<h4 id="直接克隆远程仓库到本地仓库"><a href="#直接克隆远程仓库到本地仓库" class="headerlink" title="直接克隆远程仓库到本地仓库"></a>直接克隆远程仓库到本地仓库</h4><p>第二种方式较为方便，在github上创建一个远程仓库，github.com –&gt; 头像 –&gt; Your repositories –&gt;点击New按钮 创建一个git仓库。repository name处填repTwo，点击create repository按钮，创建仓库。</p>
<p>复制SSH链接。使用git clone命令将远端仓库拷贝到本地，得到一个本地git仓库</p>
<p><img src="https://raw.githubusercontent.com/EamonLiang/picRepository/main/images/202205261659180.png" alt="image-20220525155511840"></p>
<h3 id="在本地git仓库上进行操作"><a href="#在本地git仓库上进行操作" class="headerlink" title="在本地git仓库上进行操作"></a>在本地git仓库上进行操作</h3><p>操作通常是添加文件，修改文件的操作。把每次添加文件或者每次修改文件提交到git仓库（其实对仓库每次修改，理解成仓库的一个版本，每次提交的是仓库的一个版本更好理解些）</p>
<p><img src="https://raw.githubusercontent.com/EamonLiang/picRepository/main/images/202205261700092.png" alt="image-20220525171319747"></p>
<p>对a.txt文件修改。在a.txt文件添加一行文字 本地的第一次修改。</p>
<h3 id="查看历史版本"><a href="#查看历史版本" class="headerlink" title="查看历史版本"></a>查看历史版本</h3><p>使用git log指令查看修改记录。</p>
<p><img src="https://raw.githubusercontent.com/EamonLiang/picRepository/main/images/202205261700154.png" alt="202205261257325"></p>
<h3 id="比较版本间的不同"><a href="#比较版本间的不同" class="headerlink" title="比较版本间的不同"></a>比较版本间的不同</h3><p><img src="https://raw.githubusercontent.com/EamonLiang/picRepository/main/images/202205261701992.png" alt="202205261442570"></p>
<p>除此之外，可以通过以下指令对比各个版本、分支、缓存区与git仓库中的文件差异。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 比较所有文件与缓存区文件差异</span><br><span class="line">git diff</span><br><span class="line"># 比较当前文件和缓存区文件差异</span><br><span class="line">git diff &lt;file&gt;</span><br><span class="line"># 比较两次提交之间的差异</span><br><span class="line">git diff &lt;id1&gt; &lt;id2&gt;</span><br><span class="line"># 在两个分支之间比较</span><br><span class="line">git diff &lt;branch1&gt; &lt;branch2&gt;</span><br><span class="line"># 比较缓存区和版本库差异，与下一条指令的效果一样</span><br><span class="line">git diff --staged</span><br><span class="line"># 比较缓存区和版本库差异，与上一条指令的效果一样</span><br><span class="line">git diff --cached</span><br><span class="line"># 仅仅比较统计信息</span><br><span class="line">git diff --stat</span><br></pre></td></tr></table></figure>

<h3 id="回退到历史版本"><a href="#回退到历史版本" class="headerlink" title="回退到历史版本"></a>回退到历史版本</h3><p>再创建一个修改提交，如下图所示。</p>
<p><img src="https://raw.githubusercontent.com/EamonLiang/picRepository/main/images/202205261804264.png" alt="image-20220526180430206"></p>
<h4 id="切换到历史版本不修改"><a href="#切换到历史版本不修改" class="headerlink" title="切换到历史版本不修改"></a>切换到历史版本不修改</h4><p><img src="https://raw.githubusercontent.com/EamonLiang/picRepository/main/images/202205261815898.png" alt="image-20220526181518825"></p>
<h4 id="切换到历史版本并修改"><a href="#切换到历史版本并修改" class="headerlink" title="切换到历史版本并修改"></a>切换到历史版本并修改</h4><p>也可以在历史版本上进行修改操作，创建新的分支保存在历史版本上的修改操作。</p>
<p><img src="https://raw.githubusercontent.com/EamonLiang/picRepository/main/images/202205261821950.png" alt="image-20220526182114891"></p>
<p><img src="https://raw.githubusercontent.com/EamonLiang/picRepository/main/images/202205261824753.png" alt="image-20220526182416684"></p>
<p><img src="https://raw.githubusercontent.com/EamonLiang/picRepository/main/images/202205261825132.png" alt="image-20220526182552102"></p>
<h3 id="git分支操作"><a href="#git分支操作" class="headerlink" title="git分支操作"></a>git分支操作</h3><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p><img src="https://raw.githubusercontent.com/EamonLiang/picRepository/main/images/202205262014053.png" alt="image-20220526201425022"></p>
<h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><p><img src="https://raw.githubusercontent.com/EamonLiang/picRepository/main/images/202205262015934.png" alt="image-20220526201515907"></p>
<h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><p><img src="https://raw.githubusercontent.com/EamonLiang/picRepository/main/images/202205262019050.png" alt="image-20220526201911999"></p>
<h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><p><img src="https://raw.githubusercontent.com/EamonLiang/picRepository/main/images/202205262022791.png" alt="image-20220526202232761"></p>
<h3 id="和远端仓库保持同步"><a href="#和远端仓库保持同步" class="headerlink" title="和远端仓库保持同步"></a>和远端仓库保持同步</h3><p><img src="https://raw.githubusercontent.com/EamonLiang/picRepository/main/images/202205262107341.png" alt="image-20220526210707305"></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git操作说明</title>
    <url>/2022/05/18/git%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h2 id="创建一个Git仓库"><a href="#创建一个Git仓库" class="headerlink" title="创建一个Git仓库"></a>创建一个Git仓库</h2><h3 id="使用当前目录作为Git仓库"><a href="#使用当前目录作为Git仓库" class="headerlink" title="使用当前目录作为Git仓库"></a>使用当前目录作为Git仓库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init </span><br></pre></td></tr></table></figure>

<h3 id="指定目录作为Git仓库"><a href="#指定目录作为Git仓库" class="headerlink" title="指定目录作为Git仓库"></a>指定目录作为Git仓库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init &lt;仓库名&gt;</span><br></pre></td></tr></table></figure>

<h2 id="往仓库里添加文件"><a href="#往仓库里添加文件" class="headerlink" title="往仓库里添加文件"></a>往仓库里添加文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加单个文件</span><br><span class="line">git add &lt;文件名&gt;</span><br><span class="line"># 添加所有文件</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure>

<h2 id="查看仓库状态"><a href="#查看仓库状态" class="headerlink" title="查看仓库状态"></a>查看仓库状态</h2><p>使用git status指令可以查看当前仓库状态，缓冲区内添加的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<h2 id="提交版本"><a href="#提交版本" class="headerlink" title="提交版本"></a>提交版本</h2><p>add操作是将文件提交到缓冲区，现在需要使用commit命令将文件真正的保存在Git仓库中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># git commit -m &lt;&quot;修改说明&quot;&gt;</span><br><span class="line">git commit -m &quot;Adding files&quot;</span><br></pre></td></tr></table></figure>

<p>双引号里面是提交版本的修改说明。不使用 -m 会出现编辑器让你写提交信息。</p>
<p>当往缓冲区add了很多文件，不想每一个文件都提交修改说明时，就使用-a</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -a -m &quot;changed some files&quot;</span><br></pre></td></tr></table></figure>

<h2 id="发布版本"><a href="#发布版本" class="headerlink" title="发布版本"></a>发布版本</h2><h3 id="先从服务器克隆git库"><a href="#先从服务器克隆git库" class="headerlink" title="先从服务器克隆git库"></a>先从服务器克隆git库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># git clone &lt;ssh链接&gt;</span><br><span class="line">git clone </span><br></pre></td></tr></table></figure>

<p>从服务器克隆一个git库。在github上新建一个仓库，复制ssh地址。</p>
<h3 id="修改后在推送到服务器git库上"><a href="#修改后在推送到服务器git库上" class="headerlink" title="修改后在推送到服务器git库上"></a>修改后在推送到服务器git库上</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># git push &lt;ssh链接&gt;</span><br><span class="line">git push </span><br></pre></td></tr></table></figure>

<p>这样就可以把刚刚本地的git库推送到服务器的git库上了。</p>
<h2 id="取回更新"><a href="#取回更新" class="headerlink" title="取回更新"></a>取回更新</h2><p>把服务器上的git库推送到本地的git库，也可以理解成把服务器的git库合并到本地git库上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull &lt;ssh链接&gt; &lt;branch&gt;</span><br><span class="line">&lt;ssh链接&gt;：指服务器上的git库</span><br><span class="line">&lt;branch&gt;：指服务器上的git库的哪个分支</span><br></pre></td></tr></table></figure>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>从资源库中删除文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm &lt;文件名&gt;</span><br></pre></td></tr></table></figure>

<h2 id="分支与合并"><a href="#分支与合并" class="headerlink" title="分支与合并"></a>分支与合并</h2><h3 id="创建一个新的分支"><a href="#创建一个新的分支" class="headerlink" title="创建一个新的分支"></a>创建一个新的分支</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git brach &lt;分支名&gt;</span><br></pre></td></tr></table></figure>

<p>branch指令只是创建一个新的分支，需要使用checkout命令切换分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout &lt;分支名&gt;</span><br></pre></td></tr></table></figure>

<p>第一个分支，也叫主分支，也叫默认分支。分支名为main</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout main</span><br></pre></td></tr></table></figure>

<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><p>对其他分支的修改不会影响主分支，如果想把其他分支的修改提交到主分支，则需要使用合并merge指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout main</span><br><span class="line"># 把分支名的修改提交到main分支上</span><br><span class="line">git merge &lt;分支名&gt;</span><br></pre></td></tr></table></figure>



<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -d &lt;分支名&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>代码一</title>
    <url>/2022/05/18/%E4%BB%A3%E7%A0%81%E4%B8%80/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>代码</category>
      </categories>
      <tags>
        <tag>代码摘要，文本生成</tag>
      </tags>
  </entry>
  <entry>
    <title>学习一</title>
    <url>/2022/05/18/%E5%AD%A6%E4%B9%A0%E4%B8%80/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>nlp模型</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建个人博客</title>
    <url>/2022/05/18/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="创建Github账号"><a href="#创建Github账号" class="headerlink" title="创建Github账号"></a>创建Github账号</h1>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>模板一</title>
    <url>/2022/05/18/%E6%A8%A1%E6%9D%BF%E4%B8%80/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>论文一</title>
    <url>/2022/05/18/%E8%AE%BA%E6%96%87%E4%B8%80/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>生物序列，nlp</tag>
      </tags>
  </entry>
</search>
